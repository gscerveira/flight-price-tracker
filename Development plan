# Flight Price Tracker MVP Development Guidelines

## 1. Project Setup

### 1.1 Environment Setup
- Create a new Python virtual environment for the project
- Install Flask, psycopg2, requests, and other necessary packages
- Set up a PostgreSQL database for the application

### 1.2 Project Structure
- Create `app.py` as the main application file
- Establish a `config.py` file for environment variables and configuration
- Set up directories: `models/`, `routes/`, `services/`, and `tests/`

## 2. Database Design

### 2.1 Tables
- Users: Store user information (id, email)
- Flights: Store flight details (id, origin, destination, departure_date, return_date)
- FlightPreferences: Link users to their preferred flights (id, user_id, flight_id)
- PriceRecords: Store historical price data (id, flight_id, price, timestamp)

### 2.2 Relationships
- Implement one-to-many relationship between Users and FlightPreferences
- Implement one-to-many relationship between Flights and FlightPreferences
- Implement one-to-many relationship between Flights and PriceRecords

### 2.3 Indexing
- Create UUID-based primary key indexes for all tables
- Add foreign key indexes in FlightPreferences and PriceRecords
- Create an index on the timestamp column in PriceRecords

## 3. API Development

### 3.1 User Management
- Implement POST /users endpoint to register a new user
- Implement GET /users/<user_id> endpoint to retrieve user information

### 3.2 Flight Preferences
- Create POST /preferences endpoint to add a new flight preference
- Implement GET /users/<user_id>/preferences to list user's flight preferences
- Add DELETE /preferences/<preference_id> to remove a flight preference

### 3.3 Price Tracking
- Develop GET /flights/<flight_id>/check-price endpoint to trigger a price check
- Implement GET /flights/<flight_id>/price-history for retrieving price history
- Create a background task for periodic price checking

### 3.4 Notification Service Communication
- Develop a NotificationService class to handle communication with the external service
- Implement a method to send price drop alerts to the notification service
- Add error handling and retry logic for failed communication attempts

## 4. Amadeus API Integration

### 4.1 API Setup
- Register for Amadeus API and securely store credentials
- Create an AmadeusClient class to handle API interactions

### 4.2 Flight Search
- Implement a search_flights method using the Amadeus API
- Create functions to parse and store relevant flight data

### 4.3 Price Fetching
- Develop a fetch_current_price method for tracked flights
- Implement logic to store new price records in the database

## 5. Background Tasks

### 5.1 Scheduled Price Checks
- Integrate APScheduler for managing periodic tasks
- Set up a daily task to check prices for all tracked flights

### 5.2 Notification Trigger
- Implement a compare_prices function to identify price drops
- Create a trigger_notification method to send alerts via the notification service

## 6. Testing

### 6.1 Unit Tests
- Write tests for database models (test_models.py)
- Create tests for API endpoints (test_routes.py)
- Develop tests for Amadeus API integration (test_amadeus_client.py)

### 6.2 Integration Tests
- Test the flow from flight search to price check to notification
- Implement tests for database interactions across components
- Create mocks for external services (Amadeus API, notification service)

### 6.3 Load Testing
- Use a tool like Locust to simulate multiple users tracking flights
- Test the system's performance under various load conditions

## 7. Deployment Preparation

### 7.1 Dockerization
- Create a Dockerfile for the Flask application
- Develop a docker-compose.yml for local deployment with PostgreSQL

### 7.2 Environment Variables
- Use python-dotenv to manage environment variables
- Include variables for database connection, Amadeus API credentials, and notification service URL

## 8. Documentation

### 8.1 API Documentation
- Use Flask-RESTX or Swagger UI to create interactive API documentation
- Document request/response formats for all endpoints

### 8.2 Setup Instructions
- Write a detailed README.md with setup and running instructions
- Include information on required environment variables

### 8.3 Notification Service Interface
- Document the expected payload format for price drop notifications
- Specify the protocol and endpoints for the notification service

## 9. Future Considerations

### 9.1 Scalability
- Plan for implementing user authentication and authorization
- Consider strategies for handling a growing number of tracked flights

### 9.2 Performance Optimization
- Identify potential bottlenecks in price checking and notification processes
- Research options for caching frequently accessed flight data
    